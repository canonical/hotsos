vars:
  nodes_with_limited_high_order_memory:
    '@hotsos.core.plugins.kernel.memory.MemoryChecks.nodes_with_limited_high_order_memory'
  compact_success: '@hotsos.core.plugins.kernel.memory.VMStat.compact_success'
  compaction_failures_percent: '@hotsos.core.plugins.kernel.memory.VMStat.compaction_failures_percent'
  slab_major_consumers: '@hotsos.core.plugins.kernel.memory.SlabInfo.major_consumers'
  # We use an arbitrary threshold of 10k to suggest that a lot of
  # compaction has occurred but noting that this is a rolling counter
  # and is not necessarily representative of current state.
  min_compaction_success: 10000
  max_compaction_failures_pcent: 10
  hugetlb_to_mem_total_percentage:
    '@hotsos.core.plugins.kernel.memory.MemInfo.hugetlb_to_mem_total_percentage'
  mem_avail_to_mem_total_percentage:
    '@hotsos.core.plugins.kernel.memory.MemInfo.mem_avail_to_mem_total_percentage'
  hugep_used_to_hugep_total_percentage:
    '@hotsos.core.plugins.kernel.memory.MemInfo.hugep_used_to_hugep_total_percentage'
  mem_total_gb: '@hotsos.core.plugins.kernel.memory.MemInfo.mem_total_gb'
  mem_available_gb: '@hotsos.core.plugins.kernel.memory.MemInfo.mem_available_gb'
  hugetlb_gb: '@hotsos.core.plugins.kernel.memory.MemInfo.hugetlb_gb'
  # Arbitrary thresholds set for the memory allocated for the huge
  # pages to total memory and memory available to total memory.
  hugetlb_to_mem_total_threshold_percent: 80
  mem_available_to_mem_total_thershold_percent: 3
checks:
  low_free_high_order_mem_blocks:
    varops: [[$nodes_with_limited_high_order_memory], [length_hint]]
  high_compaction_failures:
    - varops: [[$compact_success], [gt, $min_compaction_success]]
    - varops: [[$compaction_failures_percent], [gt, $max_compaction_failures_pcent]]
  too_many_free_hugepages:
    - property: hotsos.core.plugins.kernel.memory.MemInfo.huge_pages_enabled
    - varops: [[$hugetlb_to_mem_total_percentage], [gt, $hugetlb_to_mem_total_threshold_percent]]
    - varops: [[$mem_avail_to_mem_total_percentage], [lt, $mem_available_to_mem_total_thershold_percent]]
conclusions:
  low_free_high_order_mem_blocks:
    decision: low_free_high_order_mem_blocks
    raises:
      type: MemoryWarning
      message: >-
        The following numa nodes have limited high order memory available: {nodes}.
        At present the top 5 highest consumers of memory are: {top5}. See `memory:nodes`
        section in kernel summary or /proc/buddyinfo for more info.
      format-dict:
        nodes: $nodes_with_limited_high_order_memory:comma_join
        top5: $slab_major_consumers:comma_join
  high_compaction_failures:
    decision:
      # We only report on compaction errors if there is a shortage of
      # high-order zones.
      - low_free_high_order_mem_blocks
      - high_compaction_failures
    raises:
      type: MemoryWarning
      message: >-
        Memory compaction (defragmentation) success to failure ratio is at {pcent}%.
        This suggests that the system's memory is getting fragmented but the defragmentation
        attempts are failing at a significant rate, which can indicate that there are
        insufficient high-order memory blocks available and the kernel cannot form larger
        blocks on request. Running on a highly fragmented memory will have a negative impact on
        the system's performance, especially for memory I/O intensive workloads. See /proc/vmstat
        for more info.
      format-dict:
        pcent: $compaction_failures_percent
  too_many_free_hugepages:
    decision: too_many_free_hugepages
    raises:
      type: MemoryWarning
      message: >-
        This host is using hugepages which are consuming {hugetlb}GB out of {memtotal}GB total system
        memory i.e. {hugepcent}%. This leaves {memavail}GB available memory for processes not using
        hugepages. Also, only {hpusedpcent}% of the hugepages are being actively used. Memory
        reserved for hugepages can't be used for any other purpose which may starve the system of
        available memory. Please review /proc/meminfo and your current hugepages configuration to see
        if you can reduce the hugepages allocation. For details, see the kernel documentation at
        https://docs.kernel.org/admin-guide/mm/hugetlbpage.html.
      format-dict:
        hugetlb: $hugetlb_gb
        hugepcent: $hugetlb_to_mem_total_percentage
        memtotal: $mem_total_gb
        memavail: $mem_available_gb
        hpusedpcent: $hugep_used_to_hugep_total_percentage
