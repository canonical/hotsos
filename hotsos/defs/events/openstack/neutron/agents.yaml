# NOTE: for efficiency, do not capture time as subgroup unless actually necessary.
neutron-ovs-agent:
  input:
    path: 'var/log/neutron/neutron-openvswitch-agent.log'
    options:
      # Disabling all-logs for now since running against a long
      # history of logs can generate a very large amount of data that can
      # consume too much memory.
      disable-all-logs: True
  # identify rpc_loop iterations and get stats and longest running loops.
  rpc-loop:
    start:
      expr: '([\d-]+) ([\d:]+\.\d{3}) .+ Agent rpc_loop - iteration:([0-9]+) started.*'
      hint: 'Agent rpc_loop'
    end:
      expr: '([\d-]+) ([\d:]+\.\d{3}) .+ Agent rpc_loop - iteration:([0-9]+) completed..+'
      hint: 'Agent rpc_loop'
    # we want to analyse these with core.analytics.LogEventStats so don't treat as sequence.
    passthrough-results: True      
neutron-l3-agent:
  input:
    path: 'var/log/neutron/neutron-l3-agent.log'
  # identify router updates that took the longest to complete and report the longest updates.
  router-updates:
    start:
      expr: '([\d-]+) ([\d:]+\.\d{3}) .+ Starting router update for (\S+), .+ update_id (\S+). .+'
      hint: 'router update'
    end:
      expr: '([\d-]+) ([\d:]+\.\d{3}) .+ Finished a router update for (\S+), update_id (\S+). .+'
      hint: 'router update'
    # we want to analyse these with core.analytics.LogEventStats so don't treat as sequence.
    passthrough-results: True
  # identify HA router keepalived spawn events that took the longest to complete and report the longest updates.
  router-spawn-events:
    # router state_change_monitor + keepalived spawn
    # NOTE: there are no logs that depict a router create so we use the state change monitor spawn as a start point.
    start:
      expr: '([\d-]+) ([\d:]+\.\d{3}) .+ Router (\S+) .+ spawn_state_change_monitor'
      hint: 'spawn_state_change'
    end:
      expr: '([\d-]+) ([\d:]+\.\d{3}) .+ neutron.agent.linux.utils .+neutron-rootwrap.+''keepalived'',.+''/var/lib/neutron/ha_confs/([0-9a-z-]+)/keepalived.conf''.+ create_process'
      hint: 'Keepalived'
    # we want to analyse these with core.analytics.LogEventStats so don't treat as sequence.
    passthrough-results: True
