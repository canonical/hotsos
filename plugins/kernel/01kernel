#!/bin/bash -u
# This plugin displays information about the kernel.

sub_indent_str="  $INDENT_STR"
subsub_indent_str="    $INDENT_STR"
subsubsub_indent_str="      $INDENT_STR"
zone_issue_found=false

echo "kernel:"

path=${DATA_ROOT}proc/cmdline
if [ -e "$path" ]; then
    cat $path|xargs -l -I{} echo "${INDENT_STR}{}"
else
    echo "${INDENT_STR}$path not found"
fi

# TODO: consider available zones in /proc/pagetypeinfo
#path=${DATA_ROOT}proc/pagetypeinfo
#if [ -e "$data_source" ]; then
#    cat $data_source | egrep "zone\s+Normal,"| sed -r 's/\s+/ /g'
#fi

echo "${INDENT_STR}memory:"

check_mallocinfo ()
{
    local node=$1
    local zones_type=$2  # e.g. Normal, DMA etc
    local show_zones=${3:-0}
    local empty_zone_tally=0
    local high_order_seq=0
    local contiguous_empty_zones=true

    ((show_zones)) && echo "${subsubsub_indent_str}zones:"
    for zone in {10..0}; do
        awk "\$4==\"$zones_type\"" ${DATA_ROOT}proc/buddyinfo|  grep -q "Node $node," || break
        free=`awk "\\$4==\"$zones_type\"" ${DATA_ROOT}proc/buddyinfo| grep "Node $node,"| sed -r 's/\s+/ /g'| cut -d ' ' -f $((5+$zone))`
        ((show_zones)) && echo "  ${subsubsub_indent_str}$zone: $free"
        ((free)) || ((empty_zone_tally+=$zone))
        ((free)) && contiguous_empty_zones=false
        $contiguous_empty_zones && ((high_order_seq++))
    done
    # 0+1+...10 is 55 so threshold is this minus the max order
    ((empty_zone_tally>=45)) && ((high_order_seq)) && return 1
    # this implies that top 5 orders are unavailable
    ((high_order_seq>5)) && return 1
    return 0
}

get_slab_major_consumers ()
{
    declare -A top5_name=( [0]= [1]= [2]= [3]= [4]= )
    declare -A top5_num_objs=( [0]=0 [1]=0 [2]=0 [3]=0 [4]=0 )
    declare -A top5_objsize=( [0]= [1]= [2]= [3]= [4]= )
    ftmp=`mktemp`
    # name, num_objs, objsize
    cat ${DATA_ROOT}proc/slabinfo| tail -n+3| awk '{print $1, $3, $4}'| grep -v kmalloc > $ftmp
    while read line; do
        name=`echo $line| cut -d ' ' -f 1`
        num_objs=`echo $line| cut -d ' ' -f 2`
        objsize=`echo $line| cut -d ' ' -f 3`
        for ((i=0;i<5;i++)); do
            if ((num_objs>${top5_num_objs[$i]})); then
                top5_num_objs[$i]=$num_objs
                top5_name[$i]=$name
                top5_objsize[$i]=$objsize
                break
            fi
        done
    done < $ftmp
    rm $ftmp
    echo "      slab (top 5):"
    for ((i=0;i<5;i++)); do
        echo "${subsubsub_indent_str}${top5_name[$i]} ($((${top5_num_objs[$i]}*${top5_objsize[$i]}/1024))k)"
    done
}

check_nodes_memory () {
    local zones_type=$1
    local zone_issue_found=false

    readarray -t nodes<<<"`sed -rn 's/Node\s+([0-9]+).+/\1/p' ${DATA_ROOT}proc/buddyinfo| sort -u`"
    for node in ${nodes[@]}; do
        check_mallocinfo $node $zones_type
        if (($?)); then
            echo "      node$node-${zones_type,,}:"
            zone_issue_found=true
            msg_suffix=""
            ((VERBOSITY_LEVEL>=1)) || msg_suffix=" (use -v to show zones)"
            echo "${subsubsub_indent_str}may have limited high order memory - check ${DATA_ROOT}proc/buddyinfo$msg_suffix"
            # if verbosity is requested, show the zones
            ((VERBOSITY_LEVEL>=1)) && check_mallocinfo $node $zones_type 1
        fi
    done

    $zone_issue_found && return 1
    return 0
}
zone_issue_found=false
check_nodes_memory Normal || zone_issue_found=true
# only check other types of no issue detected on Normal
$zone_issue_found || check_nodes_memory DMA32 || zone_issue_found=true

# We only report on compaction errors if there is a shortage of high-order zones
if $zone_issue_found; then
    fail_count=`awk '$1=="compact_fail" {print $2}' ${DATA_ROOT}proc/vmstat`
    success_count=`awk '$1=="compact_success" {print $2}' ${DATA_ROOT}proc/vmstat`
    # we use an arbitrary threshold of 10k to suggest that a lot of compaction has
    # occurred but noting that this is a rolling counter and is not necessarily
    # representative of current state.
    if ((success_count>10000)); then
        pcent=$((fail_count/(success_count/100)))
        if ((pcent>10)); then
            echo -e "      compaction:\n${subsubsub_indent_str}failures are at $pcent% of successes (see ${DATA_ROOT}proc/vmstat)"
        fi
    fi
    ((VERBOSITY_LEVEL>=1)) && get_slab_major_consumers
else
    echo "${sub_indent_str}null"
fi

echo -e "${INDENT_STR}systemd:"
path=${DATA_ROOT}sos_commands/systemd/systemctl_show_service_--all
if [ -e "$path" ]; then
    if `egrep -q "CPUAffinity=.+" $path`; then
        egrep "CPUAffinity=.+" $path| sort -u|xargs -l -I{} echo "${sub_indent_str}{}"
    else
        echo "${sub_indent_str}CPUAffinity not set"
    fi
else
    echo "${sub_indent_str}null"
fi

