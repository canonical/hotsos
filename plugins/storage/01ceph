#!/usr/bin/python3
import re
import os
import subprocess

from common import helpers

# HOTSOS GLOBALS
VERBOSITY_LEVEL = int(os.environ.get('VERBOSITY_LEVEL', 0))
DATA_ROOT = os.environ.get('DATA_ROOT', '/')

SERVICES = ["ceph-osd",
            "ceph-mon",
            "ceph-mgr",
            "radosgw"]


def ceph_pg_imbalance():
    """
    Validate PG range.
    Upstream recommends 50-200 OSDs ideally. Higher than 200 is
    also valid if the OSD disks are of different sizes.
    """
    bad_pgs = ""
    for line in helpers.get_ceph_osd_df_tree():
        try:
            if line:
                last = line.split()[-1]
            if re.compile(r"^osd\.[0-9]+").match(last):
                pg = int(line.split()[-2])
                if pg > 0 and (pg < 50 or pg > 200):
                    bad_pgs += str(pg) + " "
        except IndexError:
            pass

    if bad_pgs:
        print("    pgs: WARNING! Found OSDs with pg counts {}."
              .format(bad_pgs.strip()) +
              " Recommended range is 50 - 200.")


def ceph_versions_mismatch():
    """
    Check versions of all running daemons are the same.
    """
    vers = dict()
    for line in helpers.get_ceph_versions():
        try:
            if re.compile(r".+ceph version.+").match(line):
                d_ver = line.split()[2]
                if d_ver in vers:
                    vers[d_ver] += 1
                else:
                    vers[d_ver] = 1
        except (IndexError, KeyError):
            pass
    if len(vers) > 1:
        print("    ceph-versions: WARNING! Found multiple ({} different)"
              " versions of daemons running.".format(len(vers)))


def svc_exists(svc):
    for line in helpers.get_ps():
        ret = re.compile(r".+({}\S*)\s+.+".format(svc)).match(line)
        if ret:
            return True


def get_osd_ids():
    osd_ids = []
    for line in helpers.get_ps():
        ret = re.compile(r".+({}\S*)\s+.*--id\s+([0-9]+)\s+.+"
                         .format(svc)).match(line)
        if ret:
            osd_ids.append(ret[2])

    return osd_ids


def seconds_to_date(secs):
    days = secs / 86400
    hours = secs / 3600 % 24
    mins = secs / 60 % 60
    secs = secs % 60

    return '{}d:{}h:{}m:{}s'.format(int(days), int(hours),
                                    int(mins), int(secs))


print("storage:")

sos_time_secs = helpers.get_sosreport_time()


osd_info = {}

for svc in SERVICES:
    if not svc_exists(svc):
        continue

    for osd_id in get_osd_ids():
        for i, line in enumerate(helpers.get_ceph_volume_lvm_list()):
            ret = re.compile(".*==== osd.{} ====.*".format(osd_id)).match(line)
            if ret:
                osd_info[osd_id] = {}

            if osd_id not in osd_info:
                continue

            ret = re.compile(r"\s+osd fsid\s+([a-z0-9]+)\s+").search(line)
            if ret:
                osd_info[osd_id]["fsid"] = ret[1]

            ret = re.compile(r"\s+devices\s+([\S]+)\s+").search(line)
            if ret:
                osd_info[osd_id]["dev"] = ret[1]

        if VERBOSITY_LEVEL >= 1:
            for line in helpers.get_ps():
                ret = re.compile(r".+/ceph-osd\s+.+--id {}\s+.+"
                                 .format(osd_id)).match(line)
                if ret:
                    rss = int(int(line.split()[5]) / 1024)
                    osd_info[osd_id]["rss"] = "{}M".format(rss)
                    break

            for line in helpers.get_ps_axo_flags():
                ret = re.compile(r".+/ceph-osd\s+.+--id {}\s+.+".format(osd_id)
                                 ).match(line)
                if ret:
                    osd_start = ' '.join(line.split()[13:17])
                    if sos_time_secs and osd_start:
                        cmd = ["date", "--date={}".format(osd_start), "+%s"]
                        osd_start_secs = subprocess.check_output(cmd)
                        osd_uptime_secs = (int(sos_time_secs) -
                                           int(osd_start_secs))
                        osd_uptime_str = seconds_to_date(osd_uptime_secs)
                        osd_info[osd_id]["etime"] = osd_uptime_str
                        break

        if VERBOSITY_LEVEL >= 3:
            for line in helpers.get_ceph_osd_tree():
                if line.split()[3] == "osd.{}".format(osd_id):
                    osd_info[osd_id]["devtype"] = line.split()[1]
                    break

if osd_info:
    print("  ceph:")
    print("    osds:")
    for osd in osd_info:
        print("      {}:".format(osd))
        for key in osd_info[osd]:
            print("        {}: {}".format(key, osd_info[osd][key]))

    ceph_pg_imbalance()
    ceph_versions_mismatch()
