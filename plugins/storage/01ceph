#!/usr/bin/python3
import json
import re
import subprocess

from common import (
    helpers,
    plugin_yaml,
)

SERVICES = ["ceph-osd",
            "ceph-mon",
            "ceph-mgr",
            "radosgw"]

SVC_VALID_SUFFIX = r"[0-9a-zA-Z-_]*[^:/]?"
CEPH_SERVICES = [r"ceph-[A-Za-z]+",
                 r"rados{}".format(SVC_VALID_SUFFIX),
                 ]
CEPH_INFO = {}


def get_ceph_pg_imbalance():
    """
    Validate PG range.
    Upstream recommends 50-200 OSDs ideally. Higher than 200 is
    also valid if the OSD disks are of different sizes but such
    are generally outliers.
    """
    bad_pgs = {}
    ceph_osd_tree = json.loads(helpers.get_ceph_osd_df_tree_json())
    if not ceph_osd_tree:
        ceph_osd_tree = helpers.get_ceph_osd_df_tree()
        if not ceph_osd_tree:
            return

        pgs_position = None
        for line in ceph_osd_tree:
            try:
                if line:
                    if pgs_position is None:
                        if 'STATUS' in line.split():
                            pgs_position = -3
                        else:
                            pgs_position = -2
                    last = line.split()[-1]
                if re.compile(r"^osd\.[0-9]+").match(last):
                    osd = line.split()[-1]
                    pg = int(line.split()[pgs_position])
                    if pg > 0 and (pg < 50 or pg > 200):
                        bad_pgs.update({osd: pg})
            except IndexError:
                pass

    else:
        for node in ceph_osd_tree['nodes']:
            if re.compile(r"^osd\.[0-9]+").match(node['name']):
                osd = node['name']
                pg = int(node['pgs'])
                if pg > 0 and (pg < 50 or pg > 200):
                    bad_pgs.update({osd: pg})

    if bad_pgs:
        CEPH_INFO["pgs-per-osd"] = bad_pgs


def get_ceph_versions_mismatch():
    """
    Get versions of all Ceph daemons.
    """

    ceph_versions = helpers.get_ceph_versions()
    if not ceph_versions:
        return

    data = None
    try:
        data = json.loads(''.join(ceph_versions))
    except ValueError:
        return

    daemon_version_info = {}

    if data:
        for unit, _ in data.items():
            if unit == "overall":
                continue
            vers = []
            for key, _ in data[unit].items():
                if re.compile(r"ceph version.+").match(key):
                    d_ver = key.split()[2]
                    if d_ver not in vers:
                        vers.append(d_ver)
            if vers:
                daemon_version_info[unit] = vers

    if daemon_version_info:
        CEPH_INFO["versions"] = daemon_version_info


def svc_exists(svc):
    for line in helpers.get_ps():
        ret = re.compile(r".+({}\S*)\s+.+".format(svc)).match(line)
        if ret:
            return True


def get_osd_ids(svc):
    osd_ids = []
    for line in helpers.get_ps():
        ret = re.compile(r".+({}\S*)\s+.*--id\s+([0-9]+)\s+.+"
                         .format(svc)).match(line)
        if ret:
            osd_ids.append(int(ret[2]))

    return osd_ids


def seconds_to_date(secs):
    days = secs / 86400
    hours = secs / 3600 % 24
    mins = secs / 60 % 60
    secs = secs % 60

    return '{}d:{}h:{}m:{}s'.format(int(days), int(hours),
                                    int(mins), int(secs))


def get_date_secs(datestring=None):
    if datestring:
        cmd = ["date", "--utc", "--date={}".format(datestring), "+%s"]
        date_in_secs = subprocess.check_output(cmd)
    else:
        date_in_secs = helpers.get_date() or 0
        if date_in_secs:
            date_in_secs = date_in_secs.strip()

    return int(date_in_secs)


def get_osd_info():
    date_in_secs = get_date_secs()

    ceph_volume_lvm_list = helpers.get_ceph_volume_lvm_list()

    osd_info = {}
    for svc in SERVICES:
        if not svc_exists(svc):
            continue

        for osd_id in get_osd_ids(svc):
            osd_info[osd_id] = {}
            if ceph_volume_lvm_list:
                for line in ceph_volume_lvm_list:
                    ret = re.compile(".*==== osd.{} ====.*".format(osd_id)
                                     ).match(line)
                    if ret:
                        osd_info[osd_id]['mark'] = 1

                    if osd_info[osd_id].get('mark') is None:
                        continue

                    ret = re.compile(r"\s+osd fsid\s+([a-z0-9]+)\s+"
                                     ).search(line)
                    if ret:
                        osd_info[osd_id]["fsid"] = ret[1]

                    ret = re.compile(r"\s+devices\s+([\S]+)\s+").search(line)
                    if ret:
                        osd_info[osd_id]["dev"] = ret[1]
                        break

            if 'mark' in osd_info[osd_id]:
                del osd_info[osd_id]['mark']

            for line in helpers.get_ps():
                ret = re.compile(r".+/ceph-osd\s+.+--id {}\s+.+".format(
                                 osd_id)).match(line)
                if ret:
                    rss = int(int(line.split()[5]) / 1024)
                    osd_info[osd_id]["rss"] = "{}M".format(rss)
                    break

            for line in helpers.get_ps_axo_flags():
                ret = re.compile(r".+/ceph-osd\s+.+--id {}\s+.+".format(
                                 osd_id)).match(line)
                if ret:
                    osd_start = ' '.join(line.split()[13:17])
                    if date_in_secs and osd_start:
                        osd_start_secs = get_date_secs(datestring=osd_start)
                        osd_uptime_secs = (date_in_secs - osd_start_secs)
                        osd_uptime_str = seconds_to_date(osd_uptime_secs)
                        osd_info[osd_id]["etime"] = osd_uptime_str
                        break

            ceph_osd_tree = helpers.get_ceph_osd_tree()
            if ceph_osd_tree:
                for line in helpers.get_ceph_osd_tree():
                    if line.split()[3] == "osd.{}".format(osd_id):
                        osd_info[osd_id]["devtype"] = line.split()[1]
                        break

    if osd_info:
        CEPH_INFO["osds"] = osd_info


def get_service_info():
    service_info = {}
    for line in helpers.get_ps():
        for svc in CEPH_SERVICES:
            ret = re.compile(r".+[\s/]+({})\s+.+".format(svc)).match(line)
            if ret:
                if ret[1] in service_info:
                    service_info[ret[1]] += 1
                else:
                    service_info[ret[1]] = 1

    if service_info:
        CEPH_INFO["services"] = ["{} ({})".format(s, service_info[s])
                                 for s in service_info]


if __name__ == "__main__":
    get_service_info()
    get_osd_info()
    get_ceph_pg_imbalance()
    get_ceph_versions_mismatch()
    if CEPH_INFO:
        plugin_yaml.dump({"ceph": CEPH_INFO})
