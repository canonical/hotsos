#!/bin/bash -u
# This plugin displays information about Ceph.

declare -a output=()
services=(
    ceph-osd
    ceph-mon
    ceph-mgr
    radosgw
)

echo "ceph:"

sos_time_secs=$(get_sosreport_time)

for svc in ${services[@]}; do
    exists="`get_ps| sed -r \"s/.*(${svc}[[:alnum:]\-]*)\s+.+/\1/g;t;d\"| sort -u| sed -r 's/^\s+/  /g'`"
    [ -z "$exists" ] && continue

    ids="`get_ps| sed -r \"s/.*(${svc}[[:alnum:]\-]*)\s+.+--id\s+([[:digit:]]+)\s+.+/\2/g;t;d\"| tr -s '\n' ','| sort| sed -r -e 's/^\s+/  /g' -e 's/,$//g'`"
    for osd_id in `echo $ids| tr ',' ' '`;do
        out_str="ceph-osd.$osd_id"

        offset=`get_ceph_volume_lvm_list | egrep -n "osd id\s+$osd_id\$" | cut -f1 -d:`
        if [ -n "$offset" ]; then
            osd_fsid=`get_ceph_volume_lvm_list | tail -n+$offset | grep -m1 "osd fsid" | sed -r 's/.+\s+([[:alnum:]]+)/\1/g'`
            osd_device=`get_ceph_volume_lvm_list | tail -n+$offset | grep -m1 "devices" | sed -r 's/.+\s+([[:alnum:]\/]+)/\1/g'`
            out_str="$out_str (fsid=$osd_fsid) (device=$osd_device)"
        else
            declare -a arr=($(get_lvm2_lvs |
                              awk -v id="osd_id=$osd_id" '/osd_fsid=/ && $0 ~ id {
                              match($0, /osd_fsid=([^,]+)/,a); split($NF,b,"("); print a[1],b[1]; exit }'))
            [[ ${#arr[@]} == 2 ]] && out_str="$out_str (fsid=${arr[0]}) (device=${arr[1]})"
        fi

        if ((VERBOSITY_LEVEL>=1)); then
            # OSD's Resident memory size
            osd_RSS=$(get_ps | awk -v id="--id $osd_id " '/ceph-osd/ && $0 ~ id {print int($6/1024); exit}')
            out_str="$out_str (RSS=${osd_RSS}M)"

            # OSD's uptime (time since it was started)
            osd_start="$(get_ps_axo_flags | awk -v id="--id $osd_id" '/ceph-osd/ && $0 ~ id {print $13, $14, $15, $16, $17; exit}')"
            if [[ $sos_time_secs -gt 0 && -n "$osd_start" ]]; then
                osd_start_secs=$(date --date="${osd_start}" +%s)
                osd_uptime_secs=$((sos_time_secs - osd_start_secs))
                osd_uptime_str="$(seconds_to_date $osd_uptime_secs)"
                out_str="$out_str (etime=$osd_uptime_str)"
            fi
        fi

        output+=( "$out_str" )
    done
done

if ((${#output[@]})); then
    for line in "${output[@]}"; do
        echo "${INDENT_STR}$line"
    done
else
    echo "${INDENT_STR}null"
fi

