#!/usr/bin/python3
import re
import os

from common import (
    constants,
    helpers
)
from openstack_common import (
    OST_PROJECTS,
    OST_SERVICES,
    OST_SERVICES_DEPS
)

# configs that dont use standard /etc/<project>/<project>.conf
OST_ETC_OVERRIDES = {"glance": "glance-api.conf",
                     "swift": "proxy.conf"}

APT_SOURCE_PATH = os.path.join(constants.DATA_ROOT, "etc/apt/sources.list.d")
OPENSTACK_INFO = {}


def get_service_info():
    service_info = {}
    for line in helpers.get_ps():
        for svc in OST_SERVICES + OST_SERVICES_DEPS:
            ret = re.compile(r".+[\s/]+({})\s+.+".format(svc)).match(line)
            if ret:
                if ret[1] in service_info:
                    service_info[ret[1]] += 1
                else:
                    service_info[ret[1]] = 1

    if service_info:
        OPENSTACK_INFO["services"] = ["{} ({})".format(s, service_info[s])
                                      for s in sorted(service_info)]


def get_release_info():
    if not os.path.exists(APT_SOURCE_PATH):
        return

    release_info = {}
    for source in os.listdir(APT_SOURCE_PATH):
        for line in open(os.path.join(APT_SOURCE_PATH, source)).readlines():
            ret = re.compile(r"(.+cloud.+)").match(line)
            if ret:
                ret = re.compile(r".+-updates/([a-z]+)\s.*").match(line)
                if ret:
                    if "uca" not in release_info:
                        release_info["uca"] = set()

                    release_info["uca"].add(ret[1])

    if release_info:
        if release_info.get("uca"):
            OPENSTACK_INFO["release"] = sorted(release_info["uca"],
                                               reverse=True)[0]
    else:
        OPENSTACK_INFO["release"] = "distro"


def get_debug_log_info():
    debug_enabled = {}
    for proj in OST_PROJECTS:
        path = OST_ETC_OVERRIDES.get(proj)
        if path is None:
            path = os.path.join(constants.DATA_ROOT,
                                "etc", proj, "{}.conf".format(proj))

        if os.path.exists(path):
            for line in open(path).readlines():
                ret = re.compile(r"^debug\s*=\s*([A-Za-z]+).*").match(line)
                if ret:
                    debug_enabled[proj] = helpers.bool_str(ret[1])

    if debug_enabled:
        OPENSTACK_INFO["debug-logging-enabled"] = debug_enabled


if __name__ == "__main__":
    get_release_info()
    get_service_info()
    get_debug_log_info()
    if OPENSTACK_INFO:
        helpers.HOTSOSYaml.dump({"openstack": OPENSTACK_INFO})
