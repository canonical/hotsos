# Definitions used to identify events in log files. Events can be single or
# multi-line. The former requires a start match and the latter requires a start
# and end.
#
# Supported fields (for full details see common.checks.EventChecksBase):
#
# * start: dict with elements "expr" and "hint" where expr is a regex pattern
#          used to match a log entry that identifies an event start point and
#          hint is an optional quick pre-search to be run before the full expr.
#
# * end: optional patter to match the end of a multi-line event.
#
# * datasource: relative path to file/directory we want to search.
#
# * allow-all-logs: whether to allow datasource to be wildcarded. The default
#                   is True and should be set to False if searching full
#                   history will result in excessive load or execution time.
#
# REMINDER: to use a single quote ' in a yaml string you need to put a double (single)quote i.e. ''
#
openstack:
  neutron-agent-checks:
    neutron-ovs-agent:
      # identify rpc_loop iterations and get stats and longest running loops.
      rpc-loop:
        start:
          expr: '^([0-9\-]+) (\S+) .+ Agent rpc_loop - iteration:([0-9]+) started.*'
          hint: 'Agent rpc_loop'
        end:
          expr: '^([0-9\-]+) (\S+) .+ Agent rpc_loop - iteration:([0-9]+) completed..+'
          hint: 'Agent rpc_loop'
        datasource: 'var/log/neutron/neutron-openvswitch-agent.log'
        # NOTE: disabling all-logs for now since running against a long
        # history of logs can generate a very large amount of data that can
        # consume too much memory.
        allow-all-logs: False
    neutron-l3-agent:
      # identify router updates that took the longest to complete and report the longest updates.
      router-updates:
        start:
          expr: '^([0-9-]+) (\S+) .+ Starting router update for (\S+), .+ update_id (\S+). .+'
          hint: 'router update'
        end:
          expr: '^([0-9-]+) (\S+) .+ Finished a router update for (\S+), update_id (\S+). .+'
          hint: 'router update'
        datasource: 'var/log/neutron/neutron-l3-agent.log'
      # identify HA router keepalived spawn events that took the longest to complete and report the longest updates.
      router-spawn-events:
        # router state_change_monitor + keepalived spawn
        start:
          expr: '^([0-9-]+) (\S+) .+ Router (\S+) .+ spawn_state_change_monitor'
          hint: 'spawn_state_change'
        end:
          expr: '^([0-9-]+) (\S+) .+ Keepalived spawned with config \S+/ha_confs/([0-9a-z-]+)/keepalived.conf .+'
          hint: 'Keepalived'
        datasource: 'var/log/neutron/neutron-l3-agent.log'
  octavia-checks:
    octavia-health-manager:
      amp-missed-heartbeats:
        datasource: 'var/log/octavia/octavia-health-manager.log'
        start:
          expr: '^(\S+) \S+ .+ Amphora (\S+) health message was processed too slowly:.+'
          hint: 'Amphora'
      lb-failover-auto:
        datasource: 'var/log/octavia/octavia-health-manager.log'
        start:
          expr: '^(\S+) \S+ .+ Performing failover for amphora:\s+(.+)'
          hint: 'failover'
    octavia-worker:
      lb-failover-manual:
        datasource: 'var/log/octavia/octavia-worker.log'
        start:
          expr: '^(\S+) \S+ .+ Performing failover for amphora:\s+(.+)'
          hint: 'failover'
  apparmor-checks:
    denials:
      nova:
        datasource: 'var/log/kern.log'
        start:
          expr: '(\S+ \d+) \d+:\S+\s+.+apparmor="DENIED".+\s+profile="(\S+nova\S+)"\s+.+'
          hint: 'apparmor'
      neutron:
        datasource: 'var/log/kern.log'
        start:
          expr: '(\S+ \d+) \d+:\S+\s+.+apparmor="DENIED".+\s+profile="(\S+neutron\S+)"\s+.+'
          hint: 'apparmor'
kernel:
  memory-check:
    kernlog:
      oom:
        datasource: 'var/log/kern.log'
        start:
          expr: '(.+ \d+) (\d+:\d+:\d+) .+ (\S+) invoked oom-killer\:'
          hint: 'oom'
  network-checks:
    kernlog:
      over-mtu:
        datasource: 'var/log/kern.log'
        start:
          expr: '.+\] (\S+): dropped over-mtu packet'
          hint: 'dropped'
      nf-conntrack-full:
        datasource: 'var/log/kern.log'
        start:
          expr: '.+ nf_conntrack: table full, dropping packet'
          hint: 'conntrack'
rabbitmq:
  cluster-checks:
    rabbitlog:
      cluster-partitions:
        datasource: 'var/log/rabbitmq/rabbit@*.log'
        start:
          expr: '.+ \S+_partitioned_network'
          hint: 'partition'

